import re
from datetime import datetime
from app.entity.FlightInfo import *
from app.entity.HotelSearchInfo import *

def remove_action_info(text):
    # Regex to match and remove any part of the text that starts with "[[" and ends with "]]"
    cleaned_text = re.sub(r"\[\[.*?\]\]", "", text)
    return cleaned_text.strip()

def identify_action(text):
    # Search for the pattern [action = '...'] in the text
    action_match = re.search(r"\[action = '(\w+)'\]", text)
    # If the pattern is found, return the action; otherwise, return None
    return action_match.group(1) if action_match else None


def parse_flight_info(text):
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    print("Start Scanning.....")
    print("Start Scanning.....")
    print(text)
    print("Start Scanning.....")
    print("Start Scanning.....")

    passenger_count = None
    date = None
    from_city = None
    to_city = None
    action = None
    lang = None

    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–µ–∫—Å—Ç–µ
    passenger_pattern = re.compile(r'passenger_count\s*=\s*(\d+)')
    date_pattern = re.compile(r'date\s*=\s*([\d\s\w]+)')
    from_city_pattern = re.compile(r'from_city\s*=\s*[\'"]?([\w\s]+)[\'"]?')
    to_city_pattern = re.compile(r'to_city\s*=\s*[\'"]?([\w\s]+)[\'"]?')
    action_pattern = re.compile(r'action\s*=\s*[\'"]?([\w\s]+)[\'"]?')
    lang_pattern = re.compile(r'language\s*=\s*[\'"]?([\w\s]+)[\'"]?')

    # –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –≤ —Ç–µ–∫—Å—Ç–µ –∏ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º
    passenger_match = passenger_pattern.search(text)
    date_match = date_pattern.search(text)
    from_city_match = from_city_pattern.search(text)
    to_city_match = to_city_pattern.search(text)
    action_match = action_pattern.search(text)
    lang_match = lang_pattern.search(text)

    if passenger_match:
        passenger_count = int(passenger_match.group(1))

    if date_match:
        try:
            date = datetime.strptime(date_match.group(1), "%d %B %Y").strftime("%Y-%m-%d")
        except ValueError:
            date = date_match.group(1)
    date = "2024-12-04"
    if from_city_match:
        from_city = from_city_match.group(1)

    if to_city_match:
        to_city = to_city_match.group(1)

    if action_match:
        action = action_match.group(1)

    if lang_match:
        lang = lang_match.group(1)

    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤: {passenger_count}")
    print(f"–î–∞—Ç–∞: {date}")
    print(f"–û—Ç–∫—É–¥–∞: {from_city}")
    print(f"–ö—É–¥–∞: {to_city}")
    print(f"Action: {action}")


    if from_city == None:

        return None


    trip_info = FlightInfo(passenger_count=passenger_count, date=date, from_city=from_city, to_city=to_city, lang=lang)

    return trip_info



import re
from dataclasses import dataclass

# Define the HotelSearchInfo dataclass
@dataclass
class HotelSearchInfo:
    guest_count: int
    from_date: str
    to_date: str
    city: str




def parse_hotel_search_info(text):
    # Improved regex pattern with flexible spaces and escaped brackets
    action_match = re.search(
        r"\[\[\s*action\s*=\s*'(\w+)'\s*\]\s*,\s*\[\s*city\s*=\s*'([\w\s]+)'\s*\]\s*,\s*\[\s*from_date\s*=\s*'([\d\w\s]+)'\s*\]\s*,\s*\[\s*to_date\s*=\s*'([\d\w\s]+)'\s*\]",
        text
    )

    if action_match:
        action = action_match.group(1)
        city = action_match.group(2)
        from_date = action_match.group(3)
        to_date = action_match.group(4)

        try:
            from_date = datetime.strptime(from_date, "%d %B %Y").strftime("%Y-%m-%d")
            to_date = datetime.strptime(to_date, "%d %B %Y").strftime("%Y-%m-%d")
        except ValueError:
            return None

        # Set guest_count to 1
        guest_count = 1

        # Create and return the HotelSearchInfo object if the action is 'hotel'
        if action == 'hotel':
            return HotelSearchInfo(guest_count, from_date, to_date, city)

    return None


# Test the function with the provided example
test = (
    "–û—Ç–ª–∏—á–Ω–æ, —è —É–∂–µ –Ω–∞ –≤–µ—Ä–Ω–æ–º –ø—É—Ç–∏! üòä –ü–æ–¥–æ–∂–¥–∏—Ç–µ –º–∏–Ω—É—Ç–∫—É, –Ω–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ—Ç–µ–ª–µ–π –Ω–∞ —Å–∞–π—Ç–µ booking.com: "
    "–ì–æ—Ä–æ–¥ ‚Äî –¢–∞—à–∫–µ–Ω—Ç  –î–∞—Ç–∞ ‚Äî —Å 15 –Ω–æ—è–±—Ä—è –¥–æ 31 –Ω–æ—è–±—Ä—è  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫ ‚Äî 1 "
    "[[action = 'hotel'],[city = 'Tasasxashkent'], [from_date = '15 november 2024'],[to_date = '31 november 2024']]"
    "  –°–∫–æ—Ä–æ –≤–µ—Ä–Ω—É—Å—å —Å —Å–∞–º—ã–º–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏! üè®‚ú®"
)

# print(parse_hotel_search_info(test))


import requests
def send_sms(code,phone):

    print(f"Code sended {code}  {phone}")

    app_hash = "UgngZHxDDxj" # prod
    mobizone_token = "kza1fe1aef2adaf485a3cfdf69c89f6ba61cfe23ca2fb47c7601efdc8d34760fc30e21"
    # app_hash = "jg9AkTD8yOw" # debug


    message  = 'Tyra  –∫–æ–¥: '+str(code)+' '+app_hash
    print(message)

    response = requests.get(
            url='https://api.mobizon.kz/service/message/sendsmsmessage?apiKey='+mobizone_token+'&recipient='+phone+'&text='+message,
        )

    print(response)

# send_sms("776766","77711474766")


def send_sms_bookids(code,phone):

    print(f"Code sended {code}  {phone}")

    app_hash = "UgngZHxDDxj" # prod
    mobizone_token = "kza1fe1aef2adaf485a3cfdf69c89f6ba61cfe23ca2fb47c7601efdc8d34760fc30e21"
    # app_hash = "jg9AkTD8yOw" # debug

    message  = 'BOOKIDS –∫–æ–¥: '+str(code)+' '+app_hash
    print(message)

    response = requests.get(
            url='https://api.mobizon.kz/service/message/sendsmsmessage?apiKey='+mobizone_token+'&recipient='+phone+'&text='+message,
        )

    print(response)


from smtplib import SMTP
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import os
from fastapi import HTTPException, status
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ SMTP
SMTP_SERVER = os.getenv("SMTP_SERVER", "smtp.example.com")
SMTP_PORT = int(os.getenv("SMTP_PORT", "587"))
SMTP_USERNAME = os.getenv("SMTP_USERNAME", "noreply@example.com")
SMTP_PASSWORD = os.getenv("SMTP_PASSWORD", "password")
DEFAULT_FROM_EMAIL = os.getenv("DEFAULT_FROM_EMAIL", "noreply@example.com")


async def send_email(recipient_email: str, subject: str, message: str, html_message: str = None):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

    Args:
        recipient_email: Email –ø–æ–ª—É—á–∞—Ç–µ–ª—è
        subject: –¢–µ–º–∞ –ø–∏—Å—å–º–∞
        message: –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        html_message: HTML-–≤–µ—Ä—Å–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    """
    try:
        msg = MIMEMultipart('alternative')
        msg['Subject'] = subject
        msg['From'] = DEFAULT_FROM_EMAIL
        msg['To'] = recipient_email

        # –¢–µ–∫—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è
        part1 = MIMEText(message, 'plain')
        msg.attach(part1)

        # HTML –≤–µ—Ä—Å–∏—è (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞)
        if html_message:
            part2 = MIMEText(html_message, 'html')
            msg.attach(part2)

        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SMTP —Å–µ—Ä–≤–µ—Ä—É –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞
        server = SMTP(SMTP_SERVER, SMTP_PORT)
        server.starttls()
        server.login(SMTP_USERNAME, SMTP_PASSWORD)
        server.send_message(msg)
        server.quit()

        logger.info(f"Email —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –∞–¥—Ä–µ—Å {recipient_email}")
        return True

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ email: {str(e)}")
        # –ù–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, —Ç.–∫. —Ñ—É–Ω–∫—Ü–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
        return False


def generate_welcome_template(user_name: str):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç HTML-—à–∞–±–ª–æ–Ω –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.

    Args:
        user_name: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Returns:
        str: HTML-—à–∞–±–ª–æ–Ω
    """
    return f"""
    <!DOCTYPE html>
    <html>
    <head>
        <meta charset="UTF-8">
        <title>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å</title>
        <style>
            body {{
                font-family: Arial, sans-serif;
                line-height: 1.6;
                color: #333;
            }}
            .container {{
                max-width: 600px;
                margin: 0 auto;
                padding: 20px;
            }}
            .header {{
                background-color: #4CAF50;
                padding: 20px;
                color: white;
                text-align: center;
            }}
            .content {{
                padding: 20px;
                background-color: #f9f9f9;
            }}
            .footer {{
                text-align: center;
                margin-top: 20px;
                font-size: 12px;
                color: #666;
            }}
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <h1>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</h1>
            </div>
            <div class="content">
                <h2>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user_name}!</h2>
                <p>–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞ –Ω–∞—à–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤.</p>
                <p>–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ–±–ª–∞—Å—Ç—è—Ö –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ.</p>
                <p>–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏.</p>
            </div>
            <div class="footer">
                <p>–° —É–≤–∞–∂–µ–Ω–∏–µ–º, –ö–æ–º–∞–Ω–¥–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏</p>
                <p>¬© 2025 –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤. –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã.</p>
            </div>
        </div>
    </body>
    </html>
    """


def generate_collaboration_notification_template(expert_name: str, user_name: str, user_email: str,
                                                 user_phone: str, message: str, request_id: str):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç HTML-—à–∞–±–ª–æ–Ω –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø—Ä–æ—Å–µ –Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ.

    Args:
        expert_name: –ò–º—è —ç–∫—Å–ø–µ—Ä—Ç–∞
        user_name: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_email: Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_phone: –¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        request_id: ID –∑–∞–ø—Ä–æ—Å–∞

    Returns:
        str: HTML-—à–∞–±–ª–æ–Ω
    """
    return f"""
    <!DOCTYPE html>
    <html>
    <head>
        <meta charset="UTF-8">
        <title>–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ</title>
        <style>
            body {{
                font-family: Arial, sans-serif;
                line-height: 1.6;
                color: #333;
            }}
            .container {{
                max-width: 600px;
                margin: 0 auto;
                padding: 20px;
            }}
            .header {{
                background-color: #2196F3;
                padding: 20px;
                color: white;
                text-align: center;
            }}
            .content {{
                padding: 20px;
                background-color: #f9f9f9;
            }}
            .message-box {{
                background-color: #fff;
                border-left: 4px solid #2196F3;
                padding: 15px;
                margin: 20px 0;
            }}
            .button {{
                display: inline-block;
                background-color: #4CAF50;
                color: white;
                padding: 10px 20px;
                text-decoration: none;
                border-radius: 5px;
                margin: 10px 5px;
            }}
            .footer {{
                text-align: center;
                margin-top: 20px;
                font-size: 12px;
                color: #666;
            }}
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <h1>–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ</h1>
            </div>
            <div class="content">
                <h2>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {expert_name}!</h2>
                <p>–í—ã –ø–æ–ª—É—á–∏–ª–∏ –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</p>

                <h3>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø—Ä–æ—Å–µ:</h3>
                <ul>
                    <li><strong>–ò–º—è:</strong> {user_name}</li>
                    <li><strong>Email:</strong> {user_email}</li>
                    <li><strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> {user_phone or "–ù–µ —É–∫–∞–∑–∞–Ω"}</li>
                </ul>

                <div class="message-box">
                    <h3>–°–æ–æ–±—â–µ–Ω–∏–µ:</h3>
                    <p>{message or "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ"}</p>
                </div>

                <p>–î–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:</p>

                <div style="text-align: center;">
                    <a href="https://example.com/approve/{request_id}" class="button">–û–¥–æ–±—Ä–∏—Ç—å</a>
                    <a href="https://example.com/reject/{request_id}" class="button" style="background-color: #f44336;">–û—Ç–∫–ª–æ–Ω–∏—Ç—å</a>
                </div>

                <p>–ò–ª–∏ –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞–º–∏.</p>
            </div>
            <div class="footer">
                <p>–° —É–≤–∞–∂–µ–Ω–∏–µ–º, –ö–æ–º–∞–Ω–¥–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏</p>
                <p>¬© 2025 –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤. –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã.</p>
            </div>
        </div>
    </body>
    </html>
    """


def generate_approval_notification_template(user_name: str, expert_name: str):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç HTML-—à–∞–±–ª–æ–Ω –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞.

    Args:
        user_name: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        expert_name: –ò–º—è —ç–∫—Å–ø–µ—Ä—Ç–∞

    Returns:
        str: HTML-—à–∞–±–ª–æ–Ω
    """
    return f"""
    <!DOCTYPE html>
    <html>
    <head>
        <meta charset="UTF-8">
        <title>–ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ –æ–¥–æ–±—Ä–µ–Ω</title>
        <style>
            body {{
                font-family: Arial, sans-serif;
                line-height: 1.6;
                color: #333;
            }}
            .container {{
                max-width: 600px;
                margin: 0 auto;
                padding: 20px;
            }}
            .header {{
                background-color: #4CAF50;
                padding: 20px;
                color: white;
                text-align: center;
            }}
            .content {{
                padding: 20px;
                background-color: #f9f9f9;
            }}
            .footer {{
                text-align: center;
                margin-top: 20px;
                font-size: 12px;
                color: #666;
            }}
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <h1>–ó–∞–ø—Ä–æ—Å –æ–¥–æ–±—Ä–µ–Ω!</h1>
            </div>
            <div class="content">
                <h2>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user_name}!</h2>
                <p>–•–æ—Ä–æ—à–∏–µ –Ω–æ–≤–æ—Å—Ç–∏! –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ —Å —ç–∫—Å–ø–µ—Ä—Ç–æ–º {expert_name} –±—ã–ª –æ–¥–æ–±—Ä–µ–Ω.</p>
                <p>–≠–∫—Å–ø–µ—Ä—Ç —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º –≤–∞–º–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–º –¥–∞–Ω–Ω—ã–º.</p>
                <p>–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏.</p>
            </div>
            <div class="footer">
                <p>–° —É–≤–∞–∂–µ–Ω–∏–µ–º, –ö–æ–º–∞–Ω–¥–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏</p>
                <p>¬© 2025 –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤. –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã.</p>
            </div>
        </div>
    </body>
    </html>
    """


import os
from typing import List


def validate_file_extension(filename: str, allowed_extensions: List[str]) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å–ø–∏—Å–∫—É —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π

    Args:
        filename: –ò–º—è —Ñ–∞–π–ª–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º
        allowed_extensions: –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π (–±–µ–∑ —Ç–æ—á–∫–∏ –≤ –Ω–∞—á–∞–ª–µ)

    Returns:
        bool: True, –µ—Å–ª–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤—Ö–æ–¥–∏—Ç –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö, –∏–Ω–∞—á–µ False
    """
    if not filename:
        return False

    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ (–±–µ–∑ —Ç–æ—á–∫–∏)
    ext = os.path.splitext(filename)[1][1:].lower()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Ö–æ–¥–∏—Ç –ª–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö
    return ext in [extension.lower() for extension in allowed_extensions]


import os
import uuid
from typing import List, Optional
from fastapi import UploadFile
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from datetime import datetime
import aiofiles



async def save_upload_file(upload_file: UploadFile, upload_dir: str) -> str:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–∞ –¥–∏—Å–∫ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
    """
    # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    filename = f"{uuid.uuid4()}-{upload_file.filename}"
    file_path = os.path.join(upload_dir, filename)

    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    os.makedirs(upload_dir, exist_ok=True)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    async with aiofiles.open(file_path, 'wb') as out_file:
        content = await upload_file.read()
        await out_file.write(content)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
    return file_path

